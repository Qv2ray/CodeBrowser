<dec f='include/google/protobuf/repeated_field.h' l='944' type='void google::protobuf::RepeatedPtrField::ExtractSubrange(int start, int num, Element ** elements)'/>
<use f='include/google/protobuf/repeated_field.h' l='1998' u='c' c='_ZN6google8protobuf16RepeatedPtrField14DeleteSubrangeEii'/>
<def f='include/google/protobuf/repeated_field.h' l='2001' ll='2007' type='void google::protobuf::RepeatedPtrField::ExtractSubrange(int start, int num, Element ** elements)'/>
<doc f='include/google/protobuf/repeated_field.h' l='929'>// Extract elements with indices in the range &quot;[start .. start+num-1]&quot;.
  // The caller assumes ownership of the extracted elements and is responsible
  // for deleting them when they are no longer needed.
  // If &quot;elements&quot; is non-NULL, then pointers to the extracted elements
  // are stored in &quot;elements[0 .. num-1]&quot; for the convenience of the caller.
  // If &quot;elements&quot; is NULL, then the caller must use some other mechanism
  // to perform any further operations (like deletion) on these elements.
  // Caution: implementation also moves elements with indices [start+num ..].
  // Calling this routine inside a loop can cause quadratic behavior.
  //
  // Memory copying behavior is identical to ReleaseLast(), described above: if
  // this RepeatedPtrField is on an arena, an object copy is performed for each
  // returned element, so that all returned element pointers are to
  // heap-allocated copies. If this copy is not desired, the user should call
  // UnsafeArenaExtractSubrange().</doc>
