<dec f='include/x86_64-linux-gnu/curl/multi.h' l='259' type='CURLMsg * curl_multi_info_read(CURLM * multi_handle, int * msgs_in_queue)'/>
<doc f='include/x86_64-linux-gnu/curl/multi.h' l='231'>/*
 * Name:    curl_multi_info_read()
 *
 * Desc:    Ask the multi handle if there&apos;s any messages/informationals from
 *          the individual transfers. Messages include informationals such as
 *          error code from the transfer or just the fact that a transfer is
 *          completed. More details on these should be written down as well.
 *
 *          Repeated calls to this function will return a new struct each
 *          time, until a special &quot;end of msgs&quot; struct is returned as a signal
 *          that there is no more to get at this point.
 *
 *          The data the returned pointer points to will not survive calling
 *          curl_multi_cleanup().
 *
 *          The &apos;CURLMsg&apos; struct is meant to be very simple and only contain
 *          very basic information. If more involved information is wanted,
 *          we will provide the particular &quot;transfer handle&quot; in that struct
 *          and that should/could/would be used in subsequent
 *          curl_easy_getinfo() calls (or similar). The point being that we
 *          must never expose complex structs to applications, as then we&apos;ll
 *          undoubtably get backwards compatibility problems in the future.
 *
 * Returns: A pointer to a filled-in struct, or NULL if it failed or ran out
 *          of structs. It also writes the number of messages left in the
 *          queue (after this read) in the integer the second argument points
 *          to.
 */</doc>
<use f='qv2ray/src/components/latency/RealPing.cpp' l='32' u='c' c='_ZL16check_multi_infoPvPiPN6Qv2ray10components7latency17LatencyTestResultEP18RealPingGlobalInfo'/>
