<dec f='qv2ray/3rdparty/qt-qrcode/lib/libqrencode/qrencode.h' l='499' type='QRcode_List * QRcode_encodeStringStructured(const char * string, int version, QRecLevel level, QRencodeMode hint, int casesensitive)'/>
<doc f='qv2ray/3rdparty/qt-qrcode/lib/libqrencode/qrencode.h' l='480'>/**
 * Create structured symbols from the string. The library automatically parses
 * the input string and encodes in a QR Code symbol.
 * @warning This function is THREAD UNSAFE when pthread is disabled.
 * @param string input string. It must be NUL terminated.
 * @param version version of the symbol.
 * @param level error correction level.
 * @param hint tell the library how Japanese Kanji characters should be
 *             encoded. If QR_MODE_KANJI is given, the library assumes that the
 *             given string contains Shift-JIS characters and encodes them in
 *             Kanji-mode. If QR_MODE_8 is given, all of non-alphanumerical
 *             characters will be encoded as is. If you want to embed UTF-8
 *             string, choose this. Other mode will cause EINVAL error.
 * @param casesensitive case-sensitive(1) or not(0).
 * @return a singly-linked list of QRcode. On error, NULL is returned, and
 *         errno is set to indicate the error. See Exceptions for the details.
 * @throw EINVAL invalid input object.
 * @throw ENOMEM unable to allocate memory for input objects.
 */</doc>
<def f='qv2ray/3rdparty/qt-qrcode/lib/libqrencode/qrencode.c' l='854' ll='861' type='QRcode_List * QRcode_encodeStringStructured(const char * string, int version, QRecLevel level, QRencodeMode hint, int casesensitive)'/>
