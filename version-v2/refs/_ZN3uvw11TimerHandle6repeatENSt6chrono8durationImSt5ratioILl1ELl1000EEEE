<dec f='qv2ray/3rdparty/uvw/src/uvw/timer.h' l='89' type='void uvw::TimerHandle::repeat(uvw::TimerHandle::Time repeat)'/>
<def f='qv2ray/3rdparty/uvw/src/uvw/timer.cpp' l='37' ll='39' type='void uvw::TimerHandle::repeat(TimerHandle::Time repeat)'/>
<doc f='qv2ray/3rdparty/uvw/src/uvw/timer.h' l='71'>/**
     * @brief Sets the repeat interval value.
     *
     * The timer will be scheduled to run on the given interval and will follow
     * normal timer semantics in the case of a time-slice overrun.&lt;br/&gt;
     * For example, if a 50ms repeating timer first runs for 17ms, it will be
     * scheduled to run again 33ms later. If other tasks consume more than the
     * 33ms following the first timer event, then another event will be emitted
     * as soon as possible.
     *
     *  If the repeat value is set from a listener bound to an event, it does
     * not immediately take effect. If the timer was non-repeating before, it
     * will have been stopped. If it was repeating, then the old repeat value
     * will have been used to schedule the next timeout.
     *
     * @param repeat Repeat interval in milliseconds (use
     * `std::chrono::duration&lt;uint64_t, std::milli&gt;`).
     */</doc>
