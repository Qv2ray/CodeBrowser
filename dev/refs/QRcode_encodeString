<dec f='qv2ray/3rdparty/qt-qrcode/lib/libqrencode/qrencode.h' l='426' type='QRcode * QRcode_encodeString(const char * string, int version, QRecLevel level, QRencodeMode hint, int casesensitive)'/>
<doc f='qv2ray/3rdparty/qt-qrcode/lib/libqrencode/qrencode.h' l='403'>/**
 * Create a symbol from the string. The library automatically parses the input
 * string and encodes in a QR Code symbol.
 * @warning This function is THREAD UNSAFE when pthread is disabled.
 * @param string input string. It must be NUL terminated.
 * @param version version of the symbol. If 0, the library chooses the minimum
 *                version for the given input data.
 * @param level error correction level.
 * @param hint tell the library how Japanese Kanji characters should be
 *             encoded. If QR_MODE_KANJI is given, the library assumes that the
 *             given string contains Shift-JIS characters and encodes them in
 *             Kanji-mode. If QR_MODE_8 is given, all of non-alphanumerical
 *             characters will be encoded as is. If you want to embed UTF-8
 *             string, choose this. Other mode will cause EINVAL error.
 * @param casesensitive case-sensitive(1) or not(0).
 * @return an instance of QRcode class. The version of the result QRcode may
 *         be larger than the designated version. On error, NULL is returned,
 *         and errno is set to indicate the error. See Exceptions for the
 *         details.
 * @throw EINVAL invalid input object.
 * @throw ENOMEM unable to allocate memory for input objects.
 * @throw ERANGE input data is too large.
 */</doc>
<def f='qv2ray/3rdparty/qt-qrcode/lib/libqrencode/qrencode.c' l='629' ll='632' type='QRcode * QRcode_encodeString(const char * string, int version, QRecLevel level, QRencodeMode hint, int casesensitive)'/>
<use f='qv2ray/3rdparty/qt-qrcode/lib/qtqrcode.cpp' l='148' u='c' c='_ZN8QtQrCode12encodeStringEv'/>
<use f='qv2ray/3rdparty/qt-qrcode/lib/qtqrcode.cpp' l='166' u='c' c='_ZN8QtQrCode12encodeSKanjiEv'/>
