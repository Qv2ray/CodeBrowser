<def f='include/c++/10/bits/random.h' l='3512' ll='3674'/>
<use f='include/c++/10/bits/random.h' l='3521'/>
<use f='include/c++/10/bits/random.h' l='3552' c='_ZNSt22bernoulli_distributionC1Ev'/>
<use f='include/c++/10/bits/random.h' l='3661' c='_ZSteqRKSt22bernoulli_distributionS1_'/>
<use f='include/c++/10/bits/random.h' l='3662' c='_ZSteqRKSt22bernoulli_distributionS1_'/>
<use f='include/c++/10/bits/random.h' l='3681' c='_ZStneRKSt22bernoulli_distributionS1_'/>
<use f='include/c++/10/bits/random.h' l='3682' c='_ZStneRKSt22bernoulli_distributionS1_'/>
<use f='include/c++/10/bits/random.h' l='3698' c='_ZStlsRSt13basic_ostreamIT_T0_ERKSt22bernoulli_distribution'/>
<use f='include/c++/10/bits/random.h' l='3712' c='_ZStrsRSt13basic_istreamIT_T0_ERSt22bernoulli_distribution'/>
<use f='include/c++/10/bits/random.tcc' l='987' c='_ZStlsRSt13basic_ostreamIT_T0_ERKSt22bernoulli_distribution'/>
<size>8</size>
<doc f='include/c++/10/bits/random.h' l='3506'>/**
   * @brief A Bernoulli random number distribution.
   *
   * Generates a sequence of true and false values with likelihood @f$p@f$
   * that true will come up and @f$(1 - p)@f$ that false will appear.
   */</doc>
<fun r='_ZNSt22bernoulli_distributionC1Ev'/>
<fun r='_ZNSt22bernoulli_distributionC1Ed'/>
<fun r='_ZNSt22bernoulli_distributionC1ERKNS_10param_typeE'/>
<fun r='_ZNSt22bernoulli_distribution5resetEv'/>
<fun r='_ZNKSt22bernoulli_distribution1pEv'/>
<fun r='_ZNKSt22bernoulli_distribution5paramEv'/>
<fun r='_ZNSt22bernoulli_distribution5paramERKNS_10param_typeE'/>
<fun r='_ZNKSt22bernoulli_distribution3minEv'/>
<fun r='_ZNKSt22bernoulli_distribution3maxEv'/>
<fun r='_ZNSt22bernoulli_distributionclERT_'/>
<fun r='_ZNSt22bernoulli_distributionclERT_RKNS_10param_typeE'/>
<fun r='_ZNSt22bernoulli_distribution10__generateET_S0_RT0_'/>
<fun r='_ZNSt22bernoulli_distribution10__generateET_S0_RT0_RKNS_10param_typeE'/>
<fun r='_ZNSt22bernoulli_distribution10__generateEPbS0_RT_RKNS_10param_typeE'/>
<fun r='_ZNSt22bernoulli_distribution15__generate_implET_S0_RT0_RKNS_10param_typeE'/>
<mbr r='std::bernoulli_distribution::_M_param' o='0' t='std::bernoulli_distribution::param_type'/>
<fun r='_ZNSt22bernoulli_distribution15__generate_implET_S0_RT0_RKNS_10param_typeE'/>
