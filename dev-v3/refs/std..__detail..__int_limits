<def f='include/c++/10/bits/int_limits.h' l='50' ll='57'/>
<def f='include/c++/10/bits/int_limits.h' l='60' ll='67'/>
<use f='include/c++/10/bits/int_limits.h' l='69'/>
<use f='include/c++/10/bits/parse_numbers.h' l='268'/>
<use f='include/c++/10/string_view' l='465' c='_ZNSt17basic_string_view10_S_compareEmm'/>
<use f='include/c++/10/string_view' l='466' c='_ZNSt17basic_string_view10_S_compareEmm'/>
<use f='include/c++/10/string_view' l='467' c='_ZNSt17basic_string_view10_S_compareEmm'/>
<use f='include/c++/10/string_view' l='468' c='_ZNSt17basic_string_view10_S_compareEmm'/>
<doc f='include/c++/10/bits/int_limits.h' l='59'>// Lightweight alternative to numeric_limits&lt;unsigned integer type&gt;.</doc>
<smbr r='std::__detail::__int_limits::digits' t='const int'/>
<fun r='_ZNSt8__detail12__int_limits3minEv'/>
<fun r='_ZNSt8__detail12__int_limits3maxEv'/>
<smbr r='std::__detail::__int_limits{type-parameter-0-0,false}::digits' t='const int'/>
<fun r='_ZNSt8__detail12__int_limitsIT_Lb0EE3minEv'/>
<fun r='_ZNSt8__detail12__int_limitsIT_Lb0EE3maxEv'/>
<use f='include/c++/10/memory_resource' l='171' c='_ZNSt3pmr21polymorphic_allocator8allocateEm'/>
